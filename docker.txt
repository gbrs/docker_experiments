i - интерактивный режим
t - подключает виртуальный терминал
В зависимости от установки возможно придется всегда писать sudo docker

### Получение информации о контейнерах
docker ps  # Активные контейнеры
docker ps -a  # Работающие контейнеры
docker logs infinite  # Логи контейнера
docker inspect infinite  # Информация о контейнере
docker events infinite  # События контейнера
docker port infinite  # Публичные порты контейнера
docker top infinite  # Выполняющиеся процессы
docker stats infinite  # Использование ресурсов
docker diff infinite  # Изменения в файлах или директориях файловой системы контейнера
docker volume ls  # Список всех папок (созданных контейнерами?)


### Реестры и репозитории Docker
docker pull nextcloud
docker pull node:16  # номер версии
docker push eon01/nginx


### Запуск и остановка контейнеров
docker run -d -p 8080:80 nextcloud  # -d - в фоновом режиме
docker run -it --name infinite -d eon01/infinite  # интерактив, имя контейнера, фоновый режим
            --rm  # удалять контейнер при остановке
docker rename infinite infinity  # Переименование контейнера
docker rm infinite  # Удаление контейнера
docker stop nginx  # Остановка
docker start nginx  # Запуск остановленного контейнера
docker restart nginx  # Перезагрузка
docker pause nginx  # Пауза
docker unpause nginx  # Снятие паузы
docker kill nginx


### Управление образами
docker images  # Список образов
docker build .  # Создание образов
docker build - < context.tar.gz
docker build -t pylounge_flask_app:v1 pylounge_flask_app/
docker rmi nginx  # Удаление образа
docker load < ubuntu.tar.gz  # Загрузка репозитория в tar (из файла или стандартного ввода)
docker save busybox > ubuntu.tar  # Сохранение образа в tar-архив
docker history  # Просмотр истории образа
docker commit nginx  # Создание образа из контейнера
docker push eon01/nginx  # Push (загрузка в реестр) образа


### Очистка в Docker
docker rm nginx  # Удаление работающего контейнера
docker container prune  # Удаление всех остановленных контейнеров
docker rmi nginx  # Удаление образа
docker image prune  # Удаление неиспользуемых (dangling) образов
docker rmi $(docker images -a -q)  # Удаление всех образов
docker system prune  # Удаление всех неиспользуемых объектов
    (контейнеров, образов, сетей и опционально папок --volume)
docker volume prune  # Удаление неиспользуемых папок


### Изменение контейнера
docker exec -it e176ec2e0cd6 bash  ## “вход” внутрь контейнер для внесения в него изменений,
    установки библиотек, например
docker commit -m "Комментарий" -a "Кто изменил" container_id repository/new_image_name
    # делаем из контейнера образ
docker commit quirky_carson new_ubuntu:1
docker push eon01/nginx
docker create -t -i eon01/infinite --name infinite


docker volume create postgres_vol_1  # создать папку?


# Пример докер-файла
FROM ubuntu:latest
MAINTAINER Maxim Melnikov 'pylounge@mail.ru'
RUN apt-get update -qy
RUN apt-get install -qy python3.8 python3-pip python3.8-dev
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
CMD ["python3","app.py"]


docker run -d --rm \
	--name postgres_1 \
	-e POSTGRES_PASSWORD=postgres_admin \
	-e POSTGRES_USER=postgres_admin \
	-e POSTGRES_DB=test_app \
	-v /custom/mount:/var/lib/postgresql/data \  # в какой нашей директории окажутся файлы БД
	--net app_net
	postgres:14


https://labs.play-with-docker.com
https://github.com/play-with-docker/play-with-docker


-------------------------------------------------------

Код из видео https://www.youtube.com/watch?v=I1h2YaWW9PE

docker volume create postgres_vol_1
docker volume create postgres_vol_2
docker volume create clickhouse_vol

# создаем сеть, чтобы контейнеры ходили друг в друга
docker network create my_net

#### postgres
docker run --rm -d \
	--name postgres_1 \
	-e POSTGRES_PASSWORD=postgres_admin \
	-e POSTGRES_USER=postgres_admin \
	-e POSTGRES_DB=test_app \
	-v postgres_vol_1:/var/lib/postgresql/data \
	--net=my_net\
	postgres:14

#### superset
docker run -d --rm --net=my_net -p 80:8088 -e "SUPERSET_SECRET_KEY=SprSt1504" --name superset apache/superset
docker exec -it superset superset fab create-admin \
              --username admin \
              --firstname Superset \
              --lastname Admin \
              --email admin@superset.com \
              --password admin
docker exec -it superset superset db upgrade
docker exec -it superset superset init
НЕ ДЕЛАТЬ: docker exec -it superset superset load_examples

На labs.play-with-docker.com
кнопка OPEN PORT.
What port would you like to open?
80 ?

В суперсете.
Справа-сверху кнопка+ - Data - Connect database.
Выбираем PostgreSQL.
Хост - postgres_1, порт - 5432, БД - test_app, логин и пароль - postgres_admin.
Далее в этом же окошке, вкладка Advanced (?), открываем раздел SQL Lab. Галочки в Allow create table, Allow dml.
А в разделе Security - Allow data upload. Нажимаем Finish.
Теперь сверху заходим в Data - Databases. Там будет наша бд.
Сверху в SQL Lab - SQL Editor. Выбираем нашу бд, схема public. Можем писать запросы.
В правом верхнем углу Upload file to database - Upload SCV (сработает ли в PWD?).
Вводим название таблицы, выбираем файл.

При присоединении PostgreSQL хост - название нашего контейнера: postgres_1. Порт постгресовский - 5432

#### clickhouse
docker run -d --rm \
    --name clickhouse \
    --net=my_net \
    -v clickhouse_vol:/var/lib/clickhouse \
    yandex/clickhouse-server

Видимо, с суперсетом через ORMку работает кликхаус:
docker exec superset pip install clickhouse-sqlalchemy
docker restart superset

При присоединении БД в суперсете заполняем поле SQL alchemy url:
clickhouse+native://clickhouse/default
По умолчанию login - default, а пароля - нет.
Те же настройки, как для постгри делаем во вкладке Advanced.
В SQL Editor, выбираем кликхаус, вводим CREATE DATABASE app, выбираем схему app.



Для присоединения к БД при docker run надо прокидывать порт: -p 5432:5432 (для postgreSQL)?
docker run -it  # позволяет через баш работать внутри контейнера?

